def findLadders(self, start, end, dict):
        # write your code here
        
        dict.add(start)
        dict.add(end)
        indexes = self.buid_indexes(dict)
        distance = self.bfs(end, start, dict, indexes)
        results = []
        self.dfs(start, end, [start], indexes, distance, results) # sequence strts with "start"
        return results
    
    def buid_indexes(self, dict):
        # key: word set pairs
        indexes = {}
        for word in dict:
            for i in range(len(word)):
                key = word[:i] + '%' + word[i + 1:]
                if key in indexes:
                    indexes[key].add(word)
                else:
                    indexes[key] = set([word])
        return indexes
    
    def get_next_words(self, word, indexes): # similar to neighbors[] in bfs template
        words = set()
        for i in range(len(word)):
            key = word[:i] + '%' + word[i + 1:]
            for w in indexes.get(key, []):
                words.add(w)
        return words
    
    def bfs(self, end, start, dict, indexes):
        distance = {end:0}
        queue = collections.deque([end]) # put end to queue first
        
        while queue:
            word = queue.popleft()
            for w in self.get_next_words(word, indexes):
                if w not in distance:
                    distance[w] = distance[word] + 1
                    queue.append(w)
        return distance
    
    def dfs(self, cur, end, sequence, indexes, distance, results):
        if cur == end:
            results.append(sequence[:])
            return
        
        for w in self.get_next_words(cur, indexes):
            if distance[w] != distance[cur] - 1: # make sure it's shortest path
                continue
            sequence.append(w)
            self.dfs(w, end, sequence, indexes, distance, results)
            sequence.pop()
