class Solution:
    """
    @param: s: A string
    @return: A list of lists of string
    """
    def partition(self, s):
        # write your code here
        memo = {}
        partitions = self.dfs(s, memo)
        return partitions
    
    def dfs(self, s, memo):
        # return all paritions of s
        if s in memo:
            return memo[s]
        if s == '':
            return []
        
        partitions = []
        for i in range(1, len(s) + 1 ):
            prefix = s[:i]
            if not self.is_palindrome(prefix):
                continue
            sub_partitions = self.dfs(s[i:], memo)
            for partition in sub_partitions:
                partitions.append([prefix] + partition) # [prefix]
        
        if self.is_palindrome(s):
            partitions.append([s]) # append [s] not s
            
        memo[s] = partitions
        return partitions
